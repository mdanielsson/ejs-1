#
#	make.gcc -- Shared makefile settings for those using the gcc compiler.
#
#	Included by various make.OSNAME files.
#
################################################################################
#
#	Copyright (c) Embedthis Software LLC, 2003-2011. All Rights Reserved.
#	The latest version of this code is available at http://www.embedthis.com
#
#	This software is open source; you can redistribute it and/or modify it 
#	under the terms of the GNU General Public License as published by the 
#	Free Software Foundation; either version 2 of the License, or (at your 
#	option) any later version.
#
#	This program is distributed WITHOUT ANY WARRANTY; without even the 
#	implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#	See the GNU General Public License for more details at:
#	http://www.embedthis.com/downloads/gplLicense.html
#	
#	This General Public License does NOT permit incorporating this software 
#	into proprietary programs. If you are unable to comply with the GPL, a 
#	commercial license for this software and support services are available
#	from Embedthis Software at http://www.embedthis.com
#
################################################################################

SHELL			:= /bin/bash

_IFLAGS         =
_CFLAGS         =
_DFLAGS         =
_ESFLAGS        =
_LDFLAGS        =
_LDPATH         =
_LIBS           = 

ifeq ($(BLD_TYPE),DEBUG)
	_ESFLAGS	+= --debug --optimize 9
else
	_ESFLAGS	+= --optimize 9
endif

#
#	Set the mtune / mcpu switch. -mcpu is now deprecated in GCC. build/components/cc
#	autodetects if mtune can be used.
#
ifeq ($(BLD_CC_MTUNE),1)
	TUNE		= mtune
else
	TUNE		= mcpu
endif

_IFLAGS		    = -I$(BLD_TOP) -I$(BLD_TOP)/src/include

#
#	Optimization and debug settings
#
_CFLAGS             += -Wall
ifeq ($(BLD_OS),MACOSX)
    _CFLAGS         += -Wshorten-64-to-32
    _CFLAGS         += -Wno-deprecated-declarations
endif
ifeq ($(BLD_TYPE),RELEASE)
    ifeq ($(BLD_TUNE),MPR_TUNE_SIZE)
        ifeq ($(BLD_OS),VXWORKS)
            _CFLAGS += -O
        else
            _CFLAGS += -Os
        endif
    else
        ifeq ($(BLD_OS),MACOSX)
            _CFLAGS += -fast
        else
            _CFLAGS += -O3
        endif
    endif
else
    _CFLAGS 	+= -g
    _LDFLAGS	+= -g
endif


ifeq ($(BUILDING_CROSS),1)
    _DFLAGS		+= -DBUILDING_CROSS=$(BUILDING_CROSS)
endif
_DLFAGS     	+= -D_REENTRANT
ifeq ($(BLD_FEATURE_MULTITHREAD),1)
ifneq ($(BLD_OS),VXWORKS)
	_LIBS   	+= -lpthread
endif
endif

ifeq ($(BLD_FEATURE_STDCPP),0)
    #
    #	If not using the standard C++ library, turn off exceptions and runtime time information.
    #
	_CXXFLAGS	+= -fno-exceptions -fno-rtti

	ifeq ($(BLD_CC_STACK_PROTECTOR),1)
		_CFLAGS += -fno-stack-protector
	endif
endif

ifneq 	($(BLD_OS),CYGWIN)
ifneq 	($(BLD_OS),VXWORKS)
	_CFLAGS	     += -fPIC 
    _DFLAGS      += -DPIC
endif
endif

#
#	Define _CFLAGS depending on the CPU architecture. User supplied CFLAGS via the environment
#	to configure are defined in BLD_CFLAGS. We do some analysis below to remove conflicts between
#	_CFLAGS and BLD_CFLAGS
#
ifeq		($(BLD_OS),MACOSX)
	#
	#	If you want to create universal binaries:
	#       _CFLAGS += -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch i386 -arch ppc
	#       _LDFLAGS+= -arch i386 -arch ppc
	#	x86_64 for 64 bit binaries. (-arch options are: i386, ppc, ppc64, x86_64)
	#
	ifeq ($(BLD_CPU),universal)
        # _CFLAGS   += -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch i386 -arch ppc
        _CFLAGS     += -arch i386 -arch ppc
		_LDFLAGS    += -arch i386 -arch ppc
	else
        # _CFLAGS   += -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5
        _CFLAGS	    += -arch $(BLD_CPU)
        _LDFLAGS    += -arch $(BLD_CPU)
	endif

else
	ifeq ($(BLD_CPU_ARCH),MPR_CPU_ARM)
		#
		#   CPU flags: ARM7TDMI, ARM7TDMI_T, ARMSA110, ARM710A, ARM810
		#
		ifneq ($(BLD_CPU_MODEL),)
			_CFLAGS	+= -$(TUNE)=arm$(BLD_CPU_MODEL) -mno-sched-prolog
		else
			_CFLAGS	+= -mno-sched-prolog
		endif
	endif

	ifeq		($(BLD_CPU_ARCH),MPR_CPU_IX86)
		ifneq	($(BLD_CPU_MODEL),)
			_CFLAGS	+= -$(TUNE)=$(BLD_CPU)
		endif
	endif

#	ifeq		($(BLD_CPU_ARCH),MPR_CPU_MIPS)
#       _CFLAGS		+= -G 0
#	endif

	ifeq ($(BLD_CPU_ARCH),MPR_CPU_PPC)
		ifneq ($(BLD_CPU_MODEL),)
			_CFLAGS += -$(TUNE)=$(BLD_CPU_MODEL)
		else
			_CFLAGS += -mpowerpc 
		endif
        _DFLAGS += -DCPU=$(BLD_CPU_UPPER) -D_GNU_TOOL
	endif

	ifeq ($(BLD_CPU_ARCH),MPR_CPU_SPARC)
		ifeq  ($(BLD_CPU),sparclite)
			_CFLAGS += -msparclite 
		else
			ifneq ($(BLD_CPU_MODEL),)
				_CFLAGS	+= -msparc$(BLD_CPU_MODEL)
			else
				_CFLAGS	+= -msparc
			endif
		endif
        _DFLAGS += -DCPU=SPARC
	endif
endif

#
#   If the user supplied CFLAGS or DFLAGS that contain -mtune, -mcpu or -march
#   then remove them from the default _CFLAGS
#
ifneq ($(findstring -mtune=,$(BLD_CFLAGS) $(BLD_DFLAGS)),)
    _CFLAGS   := $(patsubst -mtune=%,,$(_CFLAGS)) 
endif
ifneq ($(findstring -mcpu=,$(BLD_CFLAGS) $(BLD_DFLAGS)),)
    _CFLAGS   := $(patsubst -mcpu=%,,$(_CFLAGS)) 
endif
ifneq ($(findstring -march=,$(BLD_CFLAGS) $(BLD_DFLAGS)),)
    _CFLAGS   := $(patsubst -march=%,,$(_CFLAGS)) 
endif

#
#	If building with a static libc
#
ifeq ($(BLD_FEATURE_STATIC_LIBC),1)
	_LDFLAGS	+= -static-libgcc
endif

_LDPATH			= $(BLD_ABS_LIB_DIR)

# ifeq ($(BLD_OS),LINUX)
#     _LDFLAGS	+= -Wl,-rpath-link=$(BLD_ABS_LIB_DIR)
# endif

#
#	Support for dynamically loadable modules is present in shared and static builds
#
ifneq			($(BLD_OS),VXWORKS)
ifeq			($(BLD_CC_DYN_LOAD),1)
ifeq			($(BLD_OS),LINUX)
    _LIBS	    += -ldl
endif
endif
ifeq			($(BLD_FEATURE_FLOATING_POINT),1)
    _LIBS      	+= -lm
endif
endif

#
#	Using the standard C++ library. Default for products using C++ is to use their own C++ library to save space.
#
ifeq ($(BLD_FEATURE_STDCPP),1)
ifneq ($(BLD_OS),VXWORKS)
	_LIBS   	+= -lstdc++ 
endif
endif

CLEANIT			+= *.a *.o *.lo *.tmp *.bak *.out *.map *.sym *.class

.PRECIOUS: 		$(_LIBS)

#
#	These exports defined in this file are used by the bld program
#
export 	_LDPATH _LDFLAGS _LIBS BLD_TOP

#
#	Transitition rules
#
.SUFFIXES: .cpp .rc .res .def .lib .so

#
#	Build rule for C source
#
$(BLD_OBJ_DIR)/%${BLD_OBJ}: %.c
	@if [ "$(PRE)" = 1 ] ; then \
        $(call log) "[Preprocess]" "cc -E $< >$*.pre" ; \
        $(BLD_CC) -E $(MAKE_DFLAGS) $(_DFLAGS) $(BLD_DFLAGS) $(MAKE_CFLAGS) $(_CFLAGS) $(BLD_CFLAGS) $(MAKE_IFLAGS) $(BLD_IFLAGS) $(_IFLAGS) $< -o `basename $@ | sed 's/$(BLD_OBJ)$$/.pre/'` ; \
    fi
	@if [ "$(TRACE)" = 1 ] ; then echo $(BLD_CC) -c $(MAKE_DFLAGS) $(_DFLAGS) $(BLD_DFLAGS) $(MAKE_CFLAGS) $(_CFLAGS) $(BLD_CFLAGS) $(MAKE_IFLAGS) $(BLD_IFLAGS) $(_IFLAGS) $< -o $@ ; \
	else d=$(_DPATH_)/$< ; d=$${d#./} ; $(call log) "[Compile]" $$d ; fi
	@$(BLD_CC) -c $(MAKE_DFLAGS) $(_DFLAGS) $(BLD_DFLAGS) $(MAKE_CFLAGS) $(_CFLAGS) $(BLD_CFLAGS) $(MAKE_IFLAGS) $(BLD_IFLAGS) $(_IFLAGS) $< -o $@ ; \
	if [ $$? != 0 -a "$(TRACE)" != 1 ] ; then \
	    $(call log) "[DETAILS]" "$(BLD_CC) -c $(MAKE_DFLAGS) $(_DFLAGS) $(BLD_DFLAGS) $(MAKE_CFLAGS) $(_CFLAGS) $(BLD_CFLAGS) $(MAKE_IFLAGS) $(BLD_IFLAGS) $(_IFLAGS) $< -o $@\n" ; \
        exit 255; \
	fi


#
#	Build rule for C++ source
#
$(BLD_OBJ_DIR)/%${BLD_OBJ}: %.cpp
	@if [ "$(TRACE)" = 1 ] ; then echo $(BLD_CXX) -c  $(MAKE_DFLAGS) $(_DFLAGS) $(BLD_DFLAGS) $(MAKE_CFLAGS) $(_CFLAGS) $(_CXXFLAGS) $(BLD_CFLAGS) $(BLD_CXXFLAGS) $(MAKE_IFLAGS) $(BLD_IFLAGS) $(_IFLAGS) $< -o $@  ; \
	else d=$(_DPATH_)/$< ; d=$${d#./} ; $(call log) "[Compile]" $$d ; fi
	@$(BLD_CXX) -c  $(MAKE_DFLAGS) $(_DFLAGS) $(BLD_DFLAGS) $(MAKE_CFLAGS) $(_CFLAGS) $(_CXXFLAGS) $(BLD_CFLAGS) $(BLD_CXXFLAGS) $(MAKE_IFLAGS) $(BLD_IFLAGS) $(_IFLAGS) $< -o $@ 

#
#	Build rules for Java source
#
${BLD_OBJ_DIR}/classes/${SRC_PATH}/%${BLD_CLASS}: ${BLD_OBJ_DIR}/src/${SRC_PATH}/%.java
	@if [ "$(TRACE)" = 1 ] ; then echo "$(BLD_JAVAC)" $(JAVA_TARGET) $(JAVA_VERSION) -d $(BLD_OBJ_DIR)/classes $(JDEBUG) $(JFLAGS) $< ; \
	else d=$(_DPATH_)/$< ; d=$${d#./} ; $(call log) "[Compile]" $$d ; fi
	@"$(BLD_JAVAC)" $(JAVA_TARGET) $(JAVA_VERSION) -d $(BLD_OBJ_DIR)/classes $(JDEBUG) $(JFLAGS) $<

$(BLD_OBJ_DIR)/src/$(SRC_PATH)/%.java: %.java
	pp -j $(_JDEFINES) $(JDEFINES) -o $(BLD_OBJ_DIR)/src/$(SRC_PATH)/$< $< 

%.a:
	@true

%.so:
	@true
