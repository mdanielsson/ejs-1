#
#   makePackage.common - Shared routines between makeInstall and makePackage
#
################################################################################
#
#   Copyright (c) Embedthis Software LLC, 2003-2010. All Rights Reserved.
#   The latest version of this code is available at http://www.embedthis.com
#
#   This software is open source; you can redistribute it and/or modify it 
#   under the terms of the GNU General Public License as published by the 
#   Free Software Foundation; either version 2 of the License, or (at your 
#   option) any later version.
#
#   This program is distributed WITHOUT ANY WARRANTY; without even the 
#   implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details at:
#   http://www.embedthis.com/downloads/gplLicense.html
#   
#   This General Public License does NOT permit incorporating this software 
#   into proprietary programs. If you are unable to comply with the GPL, a 
#   commercial license for this software and support services are available
#   from Embedthis Software at http://www.embedthis.com
#

if [ `id -u` = 0 -o "$BLD_BUILD_OS" = WIN ] ; then
    CHGRP=chgrp
    CHOWN=chown
else
    CHGRP=true
    CHOWN=true
fi

CHMOD=chmod
CP=cp
GZIP=gzip
LN=ln
MKDIR=mkdir
PATCH=patchFile

RM="rm"
RMDIR="rmdir"
UNIX2DOS=unix2dos

#
#   Windows path conversion utility
#
type -p cygpath >/dev/null 2>&1
if [ $? = 0 ] ; then
    HAS_CYGPATH=1
else
    HAS_CYGPATH=0
fi

createFileList() {
    local prev

    prev=`pwd`
    list=`getpath -a "$1/fileList.txt"`
    cd "$2" >/dev/null
    find . -type f -print > "${list}"
    find . -type l -print >> "${list}"
    if [ $BLD_HOST_OS = WIN ] ; then
        $CHGRP SYSTEM "${list}"
    else
        $CHGRP 0 "${list}"
    fi
    cd "$prev" >/dev/null
}

createPackageName() {
    echo ${1}-${BLD_VERSION}-${BLD_NUMBER}-${BLD_HOST_DIST}-${BLD_HOST_OS}-${BLD_HOST_CPU}
}

foldFile() {
    [ $# -lt 1 ] && echo "Bad args: foldFile $*" && exit 255

    cp "${1}" /tmp/fold$$.tmp
    cat /tmp/fold$$.tmp | fold -s >"${1}"
    rm -f /tmp/fold$$.tmp
}

makeDir() {
    local d arg

    [ $# -lt 1 ] && echo "Bad args: makeDir $*" && exit 255

    arg=1
    while [ $arg -le $# ] ; do
        d="${!arg}"
        if [ $TASK = Install -o $TASK = Package ] ; then
            if [ ! -d "$d" ] ; then
                ${MKDIR} -p "$d"
                setp 755 root root "${d}"
            fi
        fi
        arg=$((arg + 1))
    done
}

setmod() {

    [ $# != 2 ] && echo "Bad args: setmod $*" && exit 255
    if [ $TASK = Install -o $TASK = Package ] ; then
        ${CHMOD} $1 "$2"
    fi
}

setp() {
    local mode group owner f

    mode=$1
    group=$2
    owner=$3
    f="$4"

    ${CHMOD} $mode "${f}"

    [ "$SKIP_PERMS" = 1 ] && return
    if [ $BLD_BUILD_OS = WIN ] ; then
        [ "$owner" = "root" -o "$owner" = 0 ] && owner=Administrators
        [ "$group" = "root" -o "$group" = 0 ] && group=SYSTEM
        # Cygwin bug when using "c:/" 
        f="${f##C:}"
        ${CHOWN} ${owner} "${f}"
        ${CHGRP} ${group} "${f}"
    else
        [ "$group" = "root" ] && group=0
        ${CHOWN} ${owner} "${f}"
        ${CHGRP} ${group} "${f}"
    fi
}

getDefaultMode() {
    local ext mode

    ext=${1##*.}
    case "$ext" in
    exe|lib|so|dylib|sh|ksh)
        mode=0755
        ;;
    exe|lib|so|dylib|sh|ksh)
        mode=0755
        ;;
    a|gif|jpg|jpeg|pdf|o)
        mode=0644
        ;;
    c|h|cc|es|htm|html|txt|TXT|xml|supp|tst|rc)
        mode=0644
        ;;
    *)
        mode=0644
        ;;
    esac
    echo $mode
}

#
#   cpy Recursive pattern matching copy program. Options:
#       --check pattern              Check that all files match the pattern
#       --dir dir                    Prefix all files with directory
#       --expand                     Expand %%Vars%%
#       --filter pattern             Remove files that match the pattern
#       --group grp                  Set the group permissions
#       --mode mode                  Set the mode permissions
#       --owner owner                Set the owner permissions
#       --path                       Use full source path
#       --strip                      Strip executables
#       --verbose                    Trace commands
#       --windows                    Convert file to windows text format
#       --zip                        Compress target using gzip
#
#   NOTE:
#       cpy dir target               This will create target/dir and recursively copy the dir contents
#       cpy dir/*/Makefile target    This will copy all dir/*/Makefiles and create under target. Dir itself not copied
#       cpy -p dir/*/Makefile target This will copy all dir/*/Makefiles and create target/dir/*/Makefile
#
cpy() {
    local argc optind arg target baseDir mode v expand files owner group f check src dirPortion pattern base 
    local rest isDir d parent windows

    entirePath=0
    expand=0
    mode=0
    strip=0
    zip=0
    owner=root
    group=0
    windows=0
    trim=0
    filter=" _ _ "
    stndFilter="\.makedep$|\*\.o$|*\.pdb$|\.tmp$|\.save$|\.sav$|OLD|/Archive/|/sav/|/save/|oldFiles|\.libs/|\.nc|\.orig|\.svn"
    check=""

    if [ "$TRACE" = 1 ] ; then
        v=1
    else
        v=0
    fi
    target=${!#}

    argc=$#
    optind=1
    while [ $optind -le $argc ] ; do

        arg=${!optind}
        case "$arg" in
        --check|-c)
            optind=$((optind + 1))
            check=${!optind}
            ;;
        --dir|-d)
            optind=$((optind + 1))
            baseDir=${!optind}
            baseDir=${baseDir##./}
            ;;
        --expand|-e)
            expand=1
            ;;
        --filter|-f)
            optind=$((optind + 1))
            filter=${!optind}
            ;;
        --group|-g)
            optind=$((optind + 1))
            group=${!optind}
            ;;
        --mode|-m)
            optind=$((optind + 1))
            mode=${!optind}
            ;;
        --owner|-o)
            optind=$((optind + 1))
            owner=${!optind}
            ;;
        --path|-p)
            entirePath=1
            ;;
        --strip|-s)
            strip=1
            ;;
        --trim|-t)
            trim=1
            ;;
        --verbose|-v)
            v=1
            ;;
        --windows|-w)
            windows=1
            ;;
        --zip|-z)
            zip=1
            ;;
        *)
            break
            ;;
        esac
        optind=$((optind + 1))
    done

    [ $v -gt 0 ] && echo -e "\ncpy $*"

    argc=$((argc - 1))
    if [ $optind -le $argc ] ; then
        files="${!optind}"
    else
        files="*"
    fi

    while : ;  do
        rm -f .cpy_copied
        if [ "$baseDir" != "" ] ; then
            files=$baseDir/$files
        fi
        isDir=0
        [ -d "${files}" ] && isDir=1
        pattern="*"

        files=${files##./}
        [ $v -gt 0 ] && echo find ${files} -name "$pattern"
        find ${files} -name "$pattern" | egrep -v "$stndFilter" | egrep -v "$filter" | egrep "$check" | while read src 
        do
            [ -d "${src#}" ] && continue

            base=${src##*/}
            if [ "${base#.*}" != "${base}" ] ; then
                #
                #   Skip tmp files starting with "."
                #
                continue
            fi

            src=${src##./}

            if [ "$isDir" = 1 ] ; then
                #
                #   Source to cpy was a directory, so prepend the last path segment of "files"
                #
                d=${files%/*}
                if [ "$d" != "$files" -a "$entirePath" = 0 ] ; then
                    dest=$target/${src/${d}/}
                else
                    dest=$target/${src}
                fi
            else
                #
                #   Source to cpy was a file, so strip of the source directory (if not entirePath requested).
                #   If the target is a directory, copy into that dir. Otherwise copy to the target file itself.
                #
                if [ -d "$target" ] ; then
                    if [ "$entirePath" = 1 ] ; then
                        dest=$target/${src}
                    else
                        dir=${files%/*}
                        base=${src##${dir}/}
                        dest=$target/${base}
                        # dest=$target/${base}
                    fi
                else
                    dest=$target
                fi
            fi
            dest=`getpath -a "$dest"`
            touch .cpy_copied

            if [ $TASK = Remove ] ; then
                [ $v -gt 0 ] && echo "rm -f $dest"
                ${RM} -f "$dest"
                if [ $zip = 1 ] ; then 
                    [ $v -gt 0 ] && echo "rm -f $dest.gz"
                    ${RM} -f "$dest".gz
                fi
                continue
            else
                parent="${dest%/*}"
                if [ ! -d "$parent" ] ; then
                    [ $v -gt 0 ] && echo -e "mkdir -p $parent\n"
                    ${MKDIR} -p "$parent"
                    setp 755 $group $owner "$parent"
                fi
            fi

            [ $v -gt 0 ] && echo -e "cp -pf ${src} ${dest}"
            ${CP} -pf "${src}" "${dest}"
            if [ $? != 0 ] ; then
                echo "# Can't copy: cp -pf $src $dest"
                echo -e "\nIf installing to system directories, become administrator or attain"
                echo -e "administrator privilege and retry.\n"
                [ -z "$DRY_RUN" ] && exit 2
            fi

            if [ $TASK = Install ] ; then
                echo "${dest}" >>install.log
            fi

            if [ $expand = 1 -a $TASK != Remove ] ; then
                [ $v -gt 1 ] && echo -e "patchFile $dest\n"
                ${PATCH} "$dest"
            fi
            if [ $windows = 1 -a $BLD_BUILD_OS = WIN ] ; then
                # Only fold for windows
                if [ $trim = 1 -a $TASK != Remove ] ; then
                    foldFile "${dest}"
                fi
                [ $v -gt 1 ] && echo -e "${UNIX2DOS} -D $dest" 2>/dev/null
                ${UNIX2DOS} -D "$dest" 2>/dev/null
            fi
            if [ $strip = 1 -a "${BLD_STRIP}" != "" -a $BLD_UNIX_LIKE = 1 -a $BLD_BUILD_OS != MACOSX ] ; then
                ${BLD_STRIP} $dest
            fi
            if [ "$mode" = 0 ] ; then
                mode=`getDefaultMode $src`
            fi
            [ $v -gt 1 ] && echo -e "setp $mode ${group} ${owner} ${dest}\n"
            setp $mode $group $owner "$dest"

            if [ $zip = 1 ] ; then
                ${RM} -f "$dest".gz
                ${GZIP} --best "$dest"
            fi
            if [ `id -u` = 0 -a  "${dest##*.}" = "so" -a $BLD_HOST_OS = LINUX -a $TASK = Install ] ; then
                ldconfig "${dest}"
            fi
        done

        if [ $TASK != Remove -a ! -f .cpy_copied ] ; then
            echo cpy: ERROR: no files copied for $files
            [ -z "$DRY_RUN" ] && exit 255
        fi
        rm -f .cpy_copied 
        [ $optind -ge $argc ] && break
        optind=$((optind + 1))
        files="${!optind}"
    done
}

#
#   Return true if the directory is likely to be a system directory
#
isSysDir() {

    [ $# != 1 ] && echo "Bad args: isSysDir $*" && exit 255

    _dir=`echo $1 | sed -e 's/.*://'`
    if [ $BLD_BUILD_OS = WIN ] ; then
        for d in /windows /windows/system32 / "/Program Files" "/Documents and Settings" /Inetpub /tmp /temp /windows/temp
        do
            [ "$_dir" = "$d" ] && return 1
        done
    else 
        for d in /bin /lib /etc /tmp /sbin /usr/bin /usr/src /usr/etc /usr/sbin /usr/include /usr/lib /usr/local /usr/local/bin /home /var /usr /usr/share /usr/share/doc /usr/share/man /usr/share/man/man1 /windows /windows/system32 /Applications /Developer /Developer/Applications
        do
            [ "$_dir" = "$d" ] && return 1
        done
    fi
    return 0
}

preparePrefixes() {
    local name dir d subdir path

    cd ${BLD_TOP} >/dev/null ; ABS_BLD_TOP=`pwd` ; cd - >/dev/null
    cd ${BLD_BIN_DIR} >/dev/null ; ABS_BLD_BIN_DIR=`pwd` ; cd - >/dev/null
    cd ${BLD_TOOLS_DIR} >/dev/null ; ABS_BLD_TOOLS_DIR=`pwd` ; cd - >/dev/null

    export PATH="$ABS_BLD_BIN_DIR:$ABS_BLD_TOOLS_DIR:$PATH"

    #
    #   Update prefixes
    #
    for name in PREFIX ROOT_PREFIX BIN_PREFIX CFG_PREFIX DOC_PREFIX JEM_PREFIX INC_PREFIX LIB_PREFIX LOG_PREFIX MAN_PREFIX \
        MOD_PREFIX PRD_PREFIX SAM_PREFIX SRC_PREFIX VER_PREFIX WEB_PREFIX
    do
        eval path="\${BLD_${name}}"
        path=`getpath -a "${path}"`
        eval ORIG_BLD_${name}=\"${path}\"
        d=BLD_${name}
        eval dir=\$BLD_${name}

        subdir=
        if [ "$TASK" = Package ] ; then
            case "$name" in 
            INC_PREFIX|DOC_PREFIX|SAM_PREFIX|MAN_PREFIX)
                subdir="/DEV"
                ;;
            SRC_PREFIX)
                subdir="/SRC"
                ;;
            *)
                subdir="/BIN"
                ;;
            esac
        fi

        if [ "$dir" != "" ] ; then
            dir="${ROOT_DIR}${subdir}`echo ${dir}`"
            dir=`echo ${dir} | sed -e 's^//^/^g'`
            if type cygpath >/dev/null 2>&1 ; then
                dir=`cygpath -m "${dir}"`
            fi
            dir=`getpath -a "$dir"`
            eval ${d}=\"$dir\"
        fi
    done
}
