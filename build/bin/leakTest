#!/bin/bash
#
#   leakTest -- Memory leak test
#
#   Copyright (c) Embedthis LLC, 2003-2010. All Rights Reserved.
#
. ${BLD_TOP}/build/bin/buildConfig.sh

export LD_LIBRARY_PATH=$BLD_LIB_DIR:$LD_LIBRARY_PATH

setTimeout() {
    (
        trap "exit 0" SIGTERM
        nap=1

        echo -e "\n  # Starting leak test (timeout $TIMEOUT secs)"
        sleep 3
        count=`expr $TIMEOUT / $nap`
        while [ $count -gt 0 ]
        do
            # echo -ne "."
            sleep $nap
            count=`expr $count - 1`
        done
        echo
        echo "  # Starting command to terminate the app."
        timeout
    ) &
    TIMEOUT_PID=$!
}


timeout() {
    if [ "$TIMEOUT_CMD" != "" ] ; then
        echo $TIMEOUT_CMD
        eval $TIMEOUT_CMD
    elif [ "$PID" != "" ] ; then
        echo kill $PID
        kill $PID
        PID=""
    fi
}

#
#   Exit handler
#
trap "
    if [ \"\${TIMEOUT_PID}\" != 0 ] ; then
        /bin/kill ${KILL_SW} -15 \${TIMEOUT_PID} >/dev/null 2>&1
        TIMEOUT_PID=0
    fi
    if [ \"${TIMEOUT_CMD}\" != '' ] ; then
        timeout
        exit 2
    fi
" EXIT SIGINT SIGTERM

#
#   Timeout handler
#
trap "
    echo 'ERROR: Leak testing timed out. Test FAILED.' 2>&1
    if [ \"\${TIMEOUT}\" != '' ] ; then
        timeout
        exit 2
    fi
" SIGALRM

#
#   Can't do leak tests if doing cross-development
#
[ $BLD_HOST_OS != $BLD_BUILD_OS ] && exit 0

#
#   This script only works for linux
#
[ $BLD_HOST_OS != LINUX ] && exit 0

NAME=
CMD=
TIMEOUT=
STRESS_CMD=
STRESS_DELAY=0
TIMEOUT_CMD=
TIMEOUT_PID=

USAGE="leakTest [--name NAME] [--cmd command] [--timeout secs] [--stressCmd command] [--stressDelay secs] [--timeoutCmd command]"

while [ "$1" != "" ]
do
    case "$1" in
    --name)
        NAME=$2
        shift ; shift ;;
    --cmd)
        CMD="$2"
        shift ; shift ;;
    --timeout)
        TIMEOUT="$2"
        shift ; shift ;;
    --stressDelay)
        STRESS_DELAY="$2"
        shift ; shift ;;
    --stressCmd)
        STRESS_CMD="$2"
        shift ; shift ;;
    --timeoutCmd)
        TIMEOUT_CMD="$2"
        shift ; shift ;;
    *)
        echo ARG $1
        echo "$USAGE"
        exit 255
        ;;
    esac
done

if [ "$STRESS_CMD" != "" ] ; then
    (
        sleep 2
        echo -e "\n  # Wait for $STRESS_DELAY secs before starting client."
        [ "$STRESS_DELAY" -gt 0 ] && sleep $STRESS_DELAY
        echo -e "\n  # Starting leak test stress load"
        echo "  $STRESS_CMD"
        eval $STRESS_CMD 
        echo -e "  # Stress command complete"
        timeout
    ) &
fi

[ "$TIMEOUT" != "" ] && setTimeout

if [ -f ${BLD_PRODUCT}.supp ] ; then
    SUPP=${BLD_PRODUCT}.supp
else 
    SUPP=${BLD_BIN_DIR}/leakTest.supp
fi

ver=`valgrind --version`
if [ "$ver" != 'valgrind-2.1.2' ] ; then
    full="--leak-check=full"
else
    full="--leak-check=yes"
fi

if [ "$TRACE" = 1 ] ; then
    printf "%12s %s" "[Test]" "valgrind --tool=memcheck $full --suppressions=${SUPP} --show-reachable=yes $CMD "
else
    printf "%12s %s" "[Test]" "valgrind $CMD ..."
fi
eval valgrind --tool=memcheck $full --gen-suppressions=all --suppressions=${SUPP} --show-reachable=yes \
    $CMD 2>valgrind.tmp >/dev/null &
PID=$$
status=$?

if [ $status != 0 ] ; then
    (
        echo "FAILED leak test $NAME" 
        cat valgrind.tmp
    ) 1>&1
    sleep 2
    exit $status
fi

match=`grep 'malloc/free: in use at exit: 0 bytes in 0 blocks.' valgrind.tmp`
if [ "$match" != "" ] ; then
    echo -e "PASSED leak test for $NAME. No memory leaked."
else
    match=`grep 'definitely lost: 0 bytes in 0 blocks.' valgrind.tmp`
    if [ "$match" != "" ] ; then
        echo -e "PASSED leak test for $NAME. No memory leaked."
    else
        echo "FAILED leak test $NAME"
        (
            echo
            echo "$NAME Leak test"
            echo "-------------"
            echo "See valgrind.tmp for details"
            echo
            cat valgrind.tmp
            echo
        ) 1>&2
        exit 1
    fi
fi

# rm -f valgrind.tmp
exit 0
