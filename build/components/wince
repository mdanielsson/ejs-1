#
#   Windows CE 
#
defineComponent() {
    local path

    name=wince
	path=`probe --emit-dir --path "$1" --partial "VC/ce/include/altcecrt.h" $name`
    if [ "$path" = "" ] ; then
        warnComponent $name "Missing Windows Visual Studio Platform Builder CE 6.0"
        return
	fi
	configureComponent --path "$path" --emitter emitCeOptions $name
	setWinEnv
}


setWinEnv()
{
    local arch libarch bin bldPath bldInclude bldLib cpu device path vs version VS WINSDK

    eval VS=\$CFG_HOST_WINCE
    eval WINSDK=\$CFG_BUILD_WINSDK
    eval cpu=\$BLD_HOST_CPU
	device=$BLD_FEATURE_DEVICE

	case $cpu in
	arm)
		arch=x86_arm
		libarch=armv4
		# or armv4i
		;;
	i?86|pentium)
		arch=x86_cex86
		libargch=x86
		;;
	mips)
		arch=x86_mips
		libarch=mipsii
		# or mipsii_fp, mipsiv, mipsiv_fp
		;;
	sh)
		arch=x86_sh
		libarch=sh4
		;;
	esac

	#
	#	Path must be unix paths ":" separators. Include and Lib are dos paths with ";" separators.
	#
	vs=`cygpath -u "$VS"`
	bin="$vs/VC/ce/bin/$arch"
	bldPath="$bin"
	bldInclude="$VS/VC/ce/include/$arch;$VS/SmartDevices/SDK/$device/Include"
	bldLib="$VS/VC/ce/lib/$libarch;$VS/SmartDevices/SDK/$device/Lib/$libarch"

    if [ "${VS%Visual Studio 8*}" != "${VS}" -a "$arch" != AMD64 ] ; then
        version=14
        version=14

    elif [ "${VS%Visual Studio 9*}" != "${VS}" -a "$arch" != AMD64 ] ; then
        version=15

    else
        echo "Microsoft CL Compiler not found"
        exit 255
    fi

    eval HOST_MSCL_VERSION="$version"
    eval HOST_HAS_MSCL=1

	CFG_HOST_PATH="$bldPath"
	CFG_HOST_INCLUDE="$bldInclude"
	CFG_HOST_LIB="$bldLib"

	#
	#	Update search path for base tools to use
	#
	SEARCH_PATH="$bin:$SEARCH_PATH"

}


emitCeOptions() {
    eval echo BLD_CC_MSCL=\$HOST_HAS_MSCL
    eval echo BLD_CC_CL_VERSION=\$HOST_MSCL_VERSION
}

